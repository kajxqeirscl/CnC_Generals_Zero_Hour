// Created by Microsoft (R) C/C++ Compiler Version 14.39.33519.0 (5562f4f8).
//
// D:\zh mods\generals next gen\CnC_Generals_Zero_Hour\Code\out\build\x64-Debug\GameRenderer\CMakeFiles\GameRenderer.dir\dx8\BrowserEngine.tlh
//
// C++ source equivalent of Win32 type library ..\..\..\..\..\run\BrowserEngine.DLL
// compiler-generated file - DO NOT EDIT!

#pragma once
#pragma pack(push, 8)

#include <comdef.h>

//
// Forward references and typedefs
//

struct __declspec(uuid("6ee45698-21ba-420d-ad40-1b547699befb"))
/* LIBID */ __BROWSERENGINELib;
struct /* coclass */ FEBrowserEngine2;
struct __declspec(uuid("ee883b17-0778-4b18-a12b-e44c0d298412"))
/* dual interface */ IFEBrowserEngine2;
struct /* coclass */ FEBrowserInstance2;
struct __declspec(uuid("a6759e9f-2ca1-4a04-af23-1658673e30b5"))
/* dual interface */ IFEBrowserInstance2;

//
// Smart pointer typedef declarations
//

_COM_SMARTPTR_TYPEDEF(IFEBrowserEngine2, __uuidof(IFEBrowserEngine2));
_COM_SMARTPTR_TYPEDEF(IFEBrowserInstance2, __uuidof(IFEBrowserInstance2));

//
// Type library items
//

struct __declspec(uuid("2b2cc8b0-2dc0-48c6-b6fd-c07820a6477e"))
FEBrowserEngine2;
    // [ default ] interface IFEBrowserEngine2

struct __declspec(uuid("ee883b17-0778-4b18-a12b-e44c0d298412"))
IFEBrowserEngine2 : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBadPageURL,put=PutBadPageURL))
    _bstr_t BadPageURL;
    __declspec(property(get=GetLoadingPageURL,put=PutLoadingPageURL))
    _bstr_t LoadingPageURL;
    __declspec(property(get=GetMouseFileName,put=PutMouseFileName))
    _bstr_t MouseFileName;
    __declspec(property(get=GetMouseBusyFileName,put=PutMouseBusyFileName))
    _bstr_t MouseBusyFileName;

    //
    // Wrapper methods for error-handling
    //

    HRESULT Initialize (
        long * d3d_device );
    HRESULT Shutdown ( );
    HRESULT CreateBrowser (
        _bstr_t browsername,
        _bstr_t url,
        long parentwindow,
        int x,
        int y,
        int w,
        int h,
        long option_bitmask,
        IDispatch * gameinterface );
    HRESULT DestroyBrowser (
        _bstr_t browsername );
    HRESULT Navigate (
        _bstr_t browsername,
        _bstr_t url );
    long GetHWND (
        _bstr_t browsername );
    long IsOpen (
        _bstr_t browsername );
    HRESULT D3DRender (
        int backbufferindex );
    HRESULT D3DUpdate ( );
    long GetUpdateRate (
        _bstr_t browsername );
    HRESULT SetUpdateRate (
        _bstr_t browsername,
        long pVal );
    _bstr_t GetBadPageURL ( );
    void PutBadPageURL (
        _bstr_t pRate );
    _bstr_t GetLoadingPageURL ( );
    void PutLoadingPageURL (
        _bstr_t pRate );
    _bstr_t GetMouseFileName ( );
    void PutMouseFileName (
        _bstr_t pRate );
    _bstr_t GetMouseBusyFileName ( );
    void PutMouseBusyFileName (
        _bstr_t pRate );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Initialize (
        long * d3d_device ) = 0;
      virtual HRESULT __stdcall raw_Shutdown ( ) = 0;
      virtual HRESULT __stdcall raw_CreateBrowser (
        BSTR browsername,
        BSTR url,
        long parentwindow,
        int x,
        int y,
        int w,
        int h,
        long option_bitmask,
        IDispatch * gameinterface ) = 0;
      virtual HRESULT __stdcall raw_DestroyBrowser (
        BSTR browsername ) = 0;
      virtual HRESULT __stdcall raw_Navigate (
        BSTR browsername,
        BSTR url ) = 0;
      virtual HRESULT __stdcall raw_GetHWND (
        BSTR browsername,
        /*[out,retval]*/ long * hwnd ) = 0;
      virtual HRESULT __stdcall raw_IsOpen (
        BSTR browsername,
        /*[out,retval]*/ long * IsOpen ) = 0;
      virtual HRESULT __stdcall raw_D3DRender (
        int backbufferindex ) = 0;
      virtual HRESULT __stdcall raw_D3DUpdate ( ) = 0;
      virtual HRESULT __stdcall raw_GetUpdateRate (
        /*[in]*/ BSTR browsername,
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetUpdateRate (
        /*[in]*/ BSTR browsername,
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_BadPageURL (
        /*[out,retval]*/ BSTR * pRate ) = 0;
      virtual HRESULT __stdcall put_BadPageURL (
        /*[in]*/ BSTR pRate ) = 0;
      virtual HRESULT __stdcall get_LoadingPageURL (
        /*[out,retval]*/ BSTR * pRate ) = 0;
      virtual HRESULT __stdcall put_LoadingPageURL (
        /*[in]*/ BSTR pRate ) = 0;
      virtual HRESULT __stdcall get_MouseFileName (
        /*[out,retval]*/ BSTR * pRate ) = 0;
      virtual HRESULT __stdcall put_MouseFileName (
        /*[in]*/ BSTR pRate ) = 0;
      virtual HRESULT __stdcall get_MouseBusyFileName (
        /*[out,retval]*/ BSTR * pRate ) = 0;
      virtual HRESULT __stdcall put_MouseBusyFileName (
        /*[in]*/ BSTR pRate ) = 0;
};

struct __declspec(uuid("812a58aa-39e8-476e-beed-00d79b76940b"))
FEBrowserInstance2;
    // [ default ] interface IFEBrowserInstance2

struct __declspec(uuid("a6759e9f-2ca1-4a04-af23-1658673e30b5"))
IFEBrowserInstance2 : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetEngineVersion))
    _variant_t EngineVersion;
    __declspec(property(get=Getgameinterface))
    IDispatchPtr gameinterface;
    __declspec(property(get=GetCommandLineArgs))
    _variant_t CommandLineArgs;
    __declspec(property(get=GetIsReleaseBuild))
    long IsReleaseBuild;
    __declspec(property(get=GetInstallFolder))
    _bstr_t InstallFolder;
    __declspec(property(get=Gethwnd))
    long hwnd;
    __declspec(property(get=GetUpdateRate,put=PutUpdateRate))
    long UpdateRate;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetSysInfo_OS))
    _bstr_t SysInfo_OS;
    __declspec(property(get=GetSysInfo_RAM))
    long SysInfo_RAM;
    __declspec(property(get=GetSysInfo_CPUType))
    _bstr_t SysInfo_CPUType;
    __declspec(property(get=GetSysInfo_CPUSpeed))
    long SysInfo_CPUSpeed;
    __declspec(property(get=GetSysInfo_XRes))
    long SysInfo_XRes;
    __declspec(property(get=GetSysInfo_YRes))
    long SysInfo_YRes;
    __declspec(property(get=GetSysInfo_VideoAdapter))
    _bstr_t SysInfo_VideoAdapter;

    //
    // Wrapper methods for error-handling
    //

    HRESULT Navigate (
        _bstr_t url );
    _variant_t RequestURL (
        const _variant_t & requesttype,
        _bstr_t url,
        _bstr_t formdata,
        _bstr_t extradata,
        const _variant_t & callback );
    HRESULT CloseBrowser ( );
    _variant_t GetEngineVersion ( );
    IDispatchPtr Getgameinterface ( );
    _variant_t GetCommandLineArgs ( );
    long GetIsReleaseBuild ( );
    _bstr_t GetInstallFolder ( );
    long Gethwnd ( );
    long GetUpdateRate ( );
    void PutUpdateRate (
        long pRate );
    _bstr_t GetName ( );
    _bstr_t GetSysInfo_OS ( );
    long GetSysInfo_RAM ( );
    _bstr_t GetSysInfo_CPUType ( );
    long GetSysInfo_CPUSpeed ( );
    long GetSysInfo_XRes ( );
    long GetSysInfo_YRes ( );
    _bstr_t GetSysInfo_VideoAdapter ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Navigate (
        BSTR url ) = 0;
      virtual HRESULT __stdcall raw_RequestURL (
        /*[in]*/ VARIANT requesttype,
        /*[in]*/ BSTR url,
        /*[in]*/ BSTR formdata,
        /*[in]*/ BSTR extradata,
        /*[in]*/ VARIANT callback,
        /*[out,retval]*/ VARIANT * result ) = 0;
      virtual HRESULT __stdcall raw_CloseBrowser ( ) = 0;
      virtual HRESULT __stdcall get_EngineVersion (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall get_gameinterface (
        /*[out,retval]*/ IDispatch * * pVal ) = 0;
      virtual HRESULT __stdcall get_CommandLineArgs (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall get_IsReleaseBuild (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_InstallFolder (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_hwnd (
        /*[out,retval]*/ long * pHwnd ) = 0;
      virtual HRESULT __stdcall get_UpdateRate (
        /*[out,retval]*/ long * pRate ) = 0;
      virtual HRESULT __stdcall put_UpdateRate (
        /*[in]*/ long pRate ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_SysInfo_OS (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_SysInfo_RAM (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_SysInfo_CPUType (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_SysInfo_CPUSpeed (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_SysInfo_XRes (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_SysInfo_YRes (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_SysInfo_VideoAdapter (
        /*[out,retval]*/ BSTR * pVal ) = 0;
};

//
// Wrapper method implementations
//

#include "D:\zh mods\generals next gen\CnC_Generals_Zero_Hour\Code\out\build\x64-Debug\GameRenderer\CMakeFiles\GameRenderer.dir\dx8\BrowserEngine.tli"

#pragma pack(pop)
